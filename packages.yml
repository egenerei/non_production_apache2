---
- name: Configure web server

  hosts: webservers
  
  become: true

  vars:
    user: vagrant
    home: "/home/{{ user }}"

  tasks:

    - name: Install required packages for hosting
      apt:
        name:
          - curl
          - apache2
          - php
          - libapache2-mod-php
          - certbot
          - python3-certbot-apache
          - software-properties-common
        state: present
        update_cache: yes

    - name: Add Grafana GPG key
      apt_key:
        url: https://packages.grafana.com/gpg.key
        state: present

    - name: Add Grafana APT repository
      apt_repository:
        repo: "deb https://packages.grafana.com/oss/deb stable main"
        state: present

    - name: Install Grafana
      apt:
        name: grafana
        state: present
        update_cache: yes
        cache_valid_time: 3600
      notify: 
        - Restart grafana-server
        - Enable grafana-server service

    

    - name: Ensure apache2 is running
      ansible.builtin.systemd:
        name: apache2
        state: started
        enabled: true
      notify: Enable apache2 service

    - name: Ensure grafana-server is running
      ansible.builtin.systemd:
        name: grafana-server
        state: started
        enabled: true
      notify: Enable grafana-server service

    - name: Download node_exporter with wget
      ansible.builtin.command:
        cmd: wget -O "{{ home }}/node_exporter.tar.gz" https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz
        creates: "{{ home }}/node_exporter.tar.gz"
      args:
        chdir: "{{ home }}"
    
    - name: Extract node_exporter
      ansible.builtin.unarchive:
        src: "{{ home }}/node_exporter.tar.gz"
        dest: "{{ home }}"
        remote_src: yes
      
    - name: Get the extracted node_exporter directory name
      ansible.builtin.find:
        paths: "{{ home }}"
        patterns: "node_exporter*"
        file_type: directory
      register: node_exporter_dir
      
    - name: Rename node_exporter directory
      ansible.builtin.command:
        cmd: mv "{{ node_exporter_dir.files[0].path }}" "{{ home }}/node_exporter"
      when: node_exporter_dir.matched > 0
      
    - name: Create systemd service file for node_exporter
      ansible.builtin.template:
        src: services/node_exporter.service.j2
        dest: /etc/systemd/system/node_exporter.service
        mode: '0644'
      notify: Start node_exporter

    - name: Download Prometheus with wget
      ansible.builtin.command:
        cmd: wget -O "{{ home }}/prometheus.tar.gz" https://github.com/prometheus/prometheus/releases/download/v3.0.0/prometheus-3.0.0.linux-amd64.tar.gz
        creates: "{{ home }}/prometheus.tar.gz"
      args:
        chdir: "{{ home }}"
    
    - name: Extract Prometheus
      ansible.builtin.unarchive:
        src: "{{ home }}/prometheus.tar.gz"
        dest: "{{ home }}"
        remote_src: yes
      
    - name: Get the extracted Prometheus directory name
      ansible.builtin.find:
        paths: "{{ home }}"
        patterns: "prometheus-3.0.0.linux-amd64"
        file_type: directory
      register: prometheus_dir
      
    - name: Rename Prometheus directory
      ansible.builtin.command:
        cmd: mv "{{ prometheus_dir.files[0].path }}" "{{ home }}/prometheus"
      when: prometheus_dir.files | length > 0
      
    - name: Ensure Prometheus data directory exists
      ansible.builtin.file:
        path: "{{ home }}/prometheus/data"
        state: directory
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0755'

    - name: Ensure Prometheus binary has correct permissions
      ansible.builtin.file:
        path: "{{ home }}/prometheus/prometheus"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0755'

    - name: Ensure Prometheus data directory has correct permissions
      ansible.builtin.file:
        path: "{{ home }}/prometheus/data"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0755'

    - name: Create systemd service file for Prometheus
      ansible.builtin.template:
        src: services/prometheus.service.j2
        dest: /etc/systemd/system/prometheus.service
        mode: '0644'
      notify: Reload and start Prometheus

    # - name: Install grafana-alloy
    #   apt:
    #     name: alloy
    #     state: present
    #     update_cache: yes
    #     cache_valid_time: 3600
    #   notify: 
    #     - Restart grafana-alloy
    #     - Enable grafana-alloy service

    # - name: Ensure grafana-alloy is running
    #   ansible.builtin.systemd:
    #     name: alloy
    #     state: started
    #     enabled: true
    #   notify: Enable grafana-alloy service

  handlers:
    - name: Restart apache2
      service:
        name: apache2
        state: restarted
      notify: Enable apache2 service

    - name: Enable apache2 service
      systemd:
        name: apache2
        enabled: yes
        state: started
    
    # - name: Restart grafana-alloy
    #   service:
    #     name: alloy
    #     state: restarted
    #   notify: Enable grafana-alloy service
    
    # - name: Enable grafana-alloy service
    #   systemd:
    #     name: alloy
    #     enabled: yes
    #     state: started

    - name: Restart grafana-server
      service:
        name: grafana-server
        state: restarted
      notify: Enable grafana-server service
    
    - name: Enable grafana-server service
      systemd:
        name: grafana-server
        enabled: yes
        state: started

    - name: Start node_exporter
      systemd:
        name: node_exporter
        enabled: yes
        state: started
      notify: Enable node_exporter

    - name: Enable node_exporter
      systemd:
        name: node_exporter
        enabled: yes
        state: started

    - name: Reload and start Prometheus
      ansible.builtin.systemd:
        name: prometheus
        enabled: yes
        state: started
