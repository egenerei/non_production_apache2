---
- name: Configure web server
  hosts: webservers
  become: true
  vars:
    admin_passwd: /etc/apache2/admin/.htpasswd
    sysadmin_passwd: /etc/apache2/sysadmin/.htpasswd
    conf_file: /etc/apache2/apache2.conf
    user: vagrant
    scripts: /home/{{user}}/scripts
  tasks:
    # - name: Install curl
    #   ansible.builtin.package:
    #     name: curl
    #     update_cache: yes
    #     cache_valid_time: 3600

    # - name: Install apache2
    #   ansible.builtin.package:
    #     name: apache2
    #     update_cache: yes
    #     cache_valid_time: 3600

    # - name: Install php
    #   ansible.builtin.package:
    #     name: 
    #       - php
    #       - libapache2-mod-php
    #     update_cache: yes
    #     cache_valid_time: 3600
    #   notify:
    #     - Restart apache2

    # - name: Install required packages for Certbot
    #   apt:
    #     name:
    #       - certbot
    #       - python3-certbot-apache 
    #     state: present
    #     update_cache: yes

    # - name: Install software-properties-common
    #   apt:
    #     name: software-properties-common
    #     state: present
    #     update_cache: yes

    # - name: Add Grafana GPG key
    #   apt_key:
    #     url: https://packages.grafana.com/gpg.key
    #     state: present

    # - name: Add Grafana APT repository
    #   apt_repository:
    #     repo: "deb https://packages.grafana.com/oss/deb stable main"
    #     state: present

    # - name: Install Grafana
    #   apt:
    #     name: grafana
    #     state: present
    #     update_cache: yes
    #     cache_valid_time: 3600
    #   notify: 
    #     - Restart grafana-server
    #     - Enable grafana-server service

    # - name: Create directory for admin credentials
    #   file: 
    #     path: /etc/apache2/admin 
    #     state: directory
    #     mode: '0755'

    # - name: Create directory for sysadmin credentials
    #   file: 
    #     path: /etc/apache2/sysadmin 
    #     state: directory
    #     mode: '0755'

    # - name: Copy admin credentials
    #   template: 
    #     src: website_conf/admin/.htpasswd
    #     dest: "{{ admin_passwd }}"
    #   notify: 
    #     - Restart apache2

    # - name: Copy sysadmin credentials
    #   template: 
    #     src: website_conf/sysadmin/.htpasswd
    #     dest: "{{ sysadmin_passwd }}"
    #   notify: 
    #     - Restart apache2

    # - name: Stablish permissions for admin credentials
    #   file:
    #     path: "{{ admin_passwd }}"
    #     mode: '0640'
    #     owner: www-data
    #     group: www-data

    # - name: Stablish permissions for sysadmin credentials
    #   file:
    #     path: "{{ sysadmin_passwd }}"
    #     mode: '0640'
    #     owner: www-data
    #     group: www-data

    # - name: Disable the current site/s configuration
    #   command:
    #     cmd: a2dissite 000-default.conf default-ssl.conf root.conf
    #   ignore_errors: yes

    # - name: Copy new configuration file root.conf to server
    #   template: 
    #     src: website_conf/root.conf
    #     dest: "/etc/apache2/sites-available/"
    #   notify:
    #     - Restart apache2

    # - name: Enable new configuration file root.conf
    #   command:
    #     cmd: a2ensite root.conf 
    #   notify:
    #     - Restart apache2

    # - name: Copy website files to website root directory
    #   copy:
    #     src: website/
    #     dest: /var/www/html/
    #     owner: www-data
    #     group: www-data
    #     mode: '0755'
    #   notify:
    #     - Restart apache2

    # - name: Enable headers module in Apache2
    #   command: a2enmod headers
    #   notify: Restart apache2
    #   changed_when: false

    # - name: Enable mime module in Apache2
    #   command: a2enmod mime
    #   notify: Restart apache2
    #   changed_when: false

    # - name: Enable status module in Apache2
    #   command: a2enmod status
    #   notify: Restart apache2
    #   changed_when: false

    # - name: Enable proxy module in Apache2
    #   command: a2enmod proxy
    #   notify: Restart apache2
    #   changed_when: false

    # - name: Enable proxy_http module in Apache2
    #   command: a2enmod proxy_http
    #   notify: Restart apache2
    #   changed_when: false

    # - name: Enable ssl module in Apache2
    #   command: a2enmod ssl
    #   notify: Restart apache2
    #   changed_when: false

    # - name: Enable rewrite module in Apache2
    #   command: a2enmod rewrite
    #   notify: Restart apache2
    #   changed_when: false

    - name: Create directory for scripts
      ansible.builtin.file:
        path: "{{ scripts }}"
        state: directory
        mode: '0755'

    - name: Copy all scripts to the scripts directory
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ scripts }}/"
        mode: '0755'  # Ensure the copied scripts have proper permissions
      with_fileglob:
        - "scripts/*.sh"

    - name: Find all files in the scripts directory
      ansible.builtin.find:
        paths: "{{ scripts }}"
        recurse: yes
        file_type: file
      register: files_to_change

    - name: Set permissions to 755 for all scripts
      ansible.builtin.file:
        path: "{{ item.path }}"
        mode: '0755'
      loop: "{{ files_to_change.files }}"
      when: files_to_change.matched > 0

    - name: Run the dyndns script
      command: "{{ scripts }}/dns_update.sh"

    - name: Check if certbot can get certificates
      command: certbot renew --dry-run
      ignore_errors: yes


    # - name: Obtain SSL certificate with Certbot
    #   command: >
    #     certbot --apache --non-interactive --agree-tos
    #     --email jorge.delreyprieto@egenerei.es
    #     -d egenerei.es
    #     -d www.egenerei.es
    #   args:
    #     creates: /etc/letsencrypt/live/egenerei.es/fullchain.pem
    #   notify: Restart apache2

  handlers:
    - name: Restart apache2
      service:
        name: apache2
        state: restarted
    
    - name: Restart grafana-server
      service:
        name: grafana-server
        state: restarted
      notify: Enable grafana-server service
    
    - name: Enable grafana-server service
      systemd:
        name: grafana-server
        enabled: yes
        state: started
  

    
